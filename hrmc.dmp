##cat hrmc.dmp | cut -d\# -f1 | xxd -p -r > hrmc.exe && ./hrmc.exe ; echo $?
##mv hrmc.out hrmc.exe && ./hrmc.exe
##objdump -d hrmc.exe ; echo "update VirtualSize and SizeOfRawData in .text section in order to use objdump -d"
##xxd hrmc.exe
##xxd hrmc.out
# hrmc.dmp is a compiler for hrmc to Windows x64 written in an ascii hexdump
## DOS Header            field name in docs            notes (UNUSED means windows doesn't care what it is)
4d 5a                    # e_magic                     MZ in ascii
00 00                    # e_cblp                      UNUSED
00 00                    # e_cp                        UNUSED
00 00                    # e_crlc                      UNUSED
00 00                    # e_cparhdr                   UNUSED
00 00                    # e_minalloc                  UNUSED
00 00                    # e_maxalloc                  UNUSED
00 00                    # e_ss                        UNUSED
00 00                    # e_sp                        UNUSED
00 00                    # e_csum                      UNUSED
00 00                    # e_ip                        UNUSED
00 00                    # e_cs                        UNUSED
00 00                    # e_lsarlc                    UNUSED
00 00                    # e_ovno                      UNUSED
00 00 00 00 00 00 00 00  # e_res                       UNUSED
00 00                    # e_oemid                     UNUSED
00 00                    # e_oeminfo                   UNUSED
00 00 00 00 00 00 00 00  # e_res2_0                    UNUSED
00 00 00 00 00 00 00 00  # e_res2_1                    UNUSED
00 00 00 00              # e_res2_2                    UNUSED
40 00 00 00              # e_lfanew                    offset of PE header

## PE Header (0x40)
50 45 00 00              # PE Signature
64 86                    # Machine x86_64
01 00                    # NumberOfSections
00 00 00 00              # TimeDateStamp               UNUSED
00 00 00 00              # PointerToSymbolTable        UNUSED
00 00 00 00              # NumberOfSymbols             UNUSED
F0 00                    # SizeOfOptionalHeader (including data directories)
23 00                    # Characteristics (1=no relocs, 2=executable, 0x20=large addresses)
## Optional Header
0B 02                    # Magic Number for PE32+
00                       # MajorLinkerVersion          UNUSED
00                       # MinorLinkerVersion          UNUSED
00 40 00 00              # SizeOfCode
00 00 00 00              # SizeOfInitializedData       UNUSED
00 00 00 00              # SizeOfUninitializedData     UNUSED
70 01 00 00              # AddressOfEntryPoint
70 01 00 00              # BaseOfCode                  UNUSED
00 00 40 00 00 00 00 00  # ImageBase (0x70)
04 00 00 00              # SectionAlignment
04 00 00 00              # FileAlignment
00 00                    # MajorOperatingSystemVersion UNUSED
00 00                    # MinorOperatingSystemVersion UNUSED
00 00                    # MajorImageVersion           UNUSED
00 00                    # MinorImageVersion           UNUSED
04 00                    # MajorSubsystemVersion
00 00                    # MinorSubsystemVersion       UNUSED
00 00 00 00              # Win32VersionValue           UNUSED
70 41 00 00              # SizeOfImage (0x90)
70 01 00 00              # SizeOfHeaders
00 00 00 00              # CheckSum                    UNUSED
02 00                    # Subsystem (2=GUI,3=CUI,10=EFI app)
00 04                    # DllCharacteristics          UNUSED
00 00 10 00 00 00 00 00  # SizeOfStackReserve          UNUSED
00 10 00 00 00 00 00 00  # SizeOfStackCommit
00 00 00 01 00 00 00 00  # SizeOfHeapReserve
00 10 00 00 00 00 00 00  # SizeOfHeapCommit            UNUSED
00 00 00 00              # LoaderFlags                 UNUSED
10 00 00 00              # NumberOfRvaAndSizes

## Data Directories (0xC8) { u32 Relative Virtual Address; u32 Size; }
00 00 00 00 00 00 00 00  # Export Table Directory
00 00 00 00 00 00 00 00  # Import Table Directory
00 00 00 00 00 00 00 00  # Resource Table Directory
00 00 00 00 00 00 00 00  # Exception Table Directory
00 00 00 00 00 00 00 00  # Certificate Table Directory
00 00 00 00 00 00 00 00  # Base Relocation Table Directory
00 00 00 00 00 00 00 00  # Debug Directory
00 00 00 00 00 00 00 00  # Architecture Directory
00 00 00 00 00 00 00 00  # Global Ptr Directory
00 00 00 00 00 00 00 00  # TLS Table Directory
00 00 00 00 00 00 00 00  # Load Config Table Directory
00 00 00 00 00 00 00 00  # Bound Import Directory
00 00 00 00 00 00 00 00  # IAT Directory
00 00 00 00 00 00 00 00  # Delay Import Descriptor Directory
00 00 00 00 00 00 00 00  # CLR Runtime Header Directory
00 00 00 00 00 00 00 00  # Reserved Directory

## .text Section Header (0x148)
2e 74 65 78 74 00 00 00  # Name
00 40 00 00              # VirtualSize # update to sizeof exe - 0x170 to use objdump -d
70 01 00 00              # VirtualAddress
00 40 00 00              # SizeOfRawData # update to sizeof exe - 0x170 to use objdump -d
70 01 00 00              # PointerToRawData
00 00 00 00              # PointerToRelocations        UNUSED
00 00 00 00              # PointerToLinenumbers        UNUSED
00 00                    # NumberOfRelocations         UNUSED
00 00                    # NumberOfLinenumbers
20 00 00 E0              # Characteristics (0x20=code, MSB_2=execute, MSB_4=read, MSB_8=write)


## Entry Point aka hrmc bytecode compiler
48 8d 0d 09 01 00 00 	# lea    rcx,[rip+0x109]        # 0x400280    400170:
48 8d 15 02 11 00 00 	# lea    rdx,[rip+0x1102]        # 0x401280   400177:
4c 8d 05 fb 20 00 00 	# lea    r8,[rip+0x20fb]        # 0x402280    40017e:
e8 05 00 00 00       	# call   0x40018f                             400185:
e9 f1 20 00 00       	# jmp    0x402280                             40018a:
48 89 cb             	# mov    rbx,rcx                              40018f:
48 89 d6             	# mov    rsi,rdx                              400192:
4c 89 c7             	# mov    rdi,r8                               400195:
0f b6 0e             	# movzx  ecx,BYTE PTR [rsi]                   400198:
0f b6 56 01          	# movzx  edx,BYTE PTR [rsi+0x1]               40019b:
48 83 c6 02          	# add    rsi,0x2                              40019f:
85 c0                	# test   eax,eax                              4001a3:
75 01                	# jne    0x4001a8                             4001a5:
c3                   	# ret                                         4001a7:
49 89 c8             	# mov    r8,rcx                               4001a8:
49 81 e0 f0 00 00 00 	# and    r8,0xf0                              4001ab:
49 89 d1             	# mov    r9,rdx                               4001b2:
49 c1 e1 04          	# shl    r9,0x4                               4001b5:
89 c8                	# mov    eax,ecx                              4001b9:
c1 e0 04             	# shl    eax,0x4                              4001bb:
66 0f 6f 04 03       	# movdqa xmm0,XMMWORD PTR [rbx+rax*1]         4001be:
66 0f 7f 07          	# movdqa XMMWORD PTR [rdi],xmm0               4001c3:
48 83 c7 10          	# add    rdi,0x10                             4001c7:
80 f9 de             	# cmp    cl,0xde                              4001cb:
75 0b                	# jne    0x4001db                             4001ce:
48 89 d8             	# mov    rax,rbx                              4001d0:
48 29 f8             	# sub    rax,rdi                              4001d3:
89 47 fc             	# mov    DWORD PTR [rdi-0x4],eax              4001d6:
eb bd                	# jmp    0x400198                             4001d9:
80 f9 bb             	# cmp    cl,0xbb                              4001db:
75 0c                	# jne    0x4001ec                             4001de:
4a 8b 04 0b          	# mov    rax,QWORD PTR [rbx+r9*1]             4001e0:
48 29 f8             	# sub    rax,rdi                              4001e4:
89 47 fc             	# mov    DWORD PTR [rdi-0x4],eax              4001e7:
eb ac                	# jmp    0x400198                             4001ea:
49 81 f8 d0 00 00 00 	# cmp    r8,0xd0                              4001ec:
75 06                	# jne    0x4001fb                             4001f3:
44 89 4f f7          	# mov    DWORD PTR [rdi-0x9],r9d              4001f5:
eb 9d                	# jmp    0x400198                             4001f9:
49 81 f8 e0 00 00 00 	# cmp    r8,0xe0                              4001fb:
75 05                	# jne    0x400209                             400202:
88 57 f7             	# mov    BYTE PTR [rdi-0x9],dl                400204:
eb 8f                	# jmp    0x400198                             400207:
49 83 f8 50          	# cmp    r8,0x50                              400209:
75 0e                	# jne    0x40021d                             40020d:
0f be c2             	# movsx  eax,dl                               40020f:
c1 e0 03             	# shl    eax,0x3                              400212:
89 47 f7             	# mov    DWORD PTR [rdi-0x9],eax              400215:
e9 7b ff ff ff       	# jmp    0x400198                             400218:
49 83 f8 70          	# cmp    r8,0x70                              40021d:
0f 85 71 ff ff ff    	# jne    0x400198                             400221:
80 f9 7e             	# cmp    cl,0x7e                              400227:
75 04                	# jne    0x400230                             40022a:
4a 89 3c 0b          	# mov    QWORD PTR [rbx+r9*1],rdi             40022c:
80 f9 7f             	# cmp    cl,0x7f                              400230:
0f 85 5f ff ff ff    	# jne    0x400198                             400233:
4c 8d 5e fe          	# lea    r11,[rsi-0x2]                        400239:
49 89 fc             	# mov    r12,rdi                              40023d:
49 89 d5             	# mov    r13,rdx                              400240:
49 83 eb 02          	# sub    r11,0x2                              400243:
41 8a 0b             	# mov    cl,BYTE PTR [r11]                    400247:
41 8a 53 01          	# mov    dl,BYTE PTR [r11+0x1]                40024a:
49 83 ec 10          	# sub    r12,0x10                             40024e:
4c 39 ea             	# cmp    rdx,r13                              400252:
75 ec                	# jne    0x400243                             400255:
80 f9 bf             	# cmp    cl,0xbf                              400257:
74 05                	# je     0x400261                             40025a:
80 f9 b0             	# cmp    cl,0xb0                              40025c:
75 0b                	# jne    0x40026c                             40025f:
48 89 f8             	# mov    rax,rdi                              400261:
4c 29 e0             	# sub    rax,r12                              400264:
41 89 44 24 fc       	# mov    DWORD PTR [r12-0x4],eax              400267:
80 f9 7e             	# cmp    cl,0x7e                              40026c:
75 d2                	# jne    0x400243                             40026f:
e9 22 ff ff ff       	# jmp    0x400198                             400271:

#400276
0000 0000 0000 0000 0000 # 400280
0000 0000 0000 0000 0000 0000 0000 0000 # 00
436c 6f73 6548 616e 646c 6500 0000 0000 # 01 "CloseHandle" then actual CloseHandle
0000 0000 0000 0000 0000 0000 0000 0000 # 02 get_kernel32 then actual kernel32
4b00 4500 5200 4e00 4500 4c00 3300 3200 # 03 KERNEL32.DLL unicode string
2e00 4400 4c00 4c00 0000 0000 0000 0000 # 04 KERNEL32.DLL unicode string continued
0000 0000 0000 0000 0000 0000 0000 0000 # 05 strcmp
4765 7453 7464 4861 6e64 6c65 0000 0000 # 06 "GetStdHandle" then actual GetStdHandle
5669 7274 7561 6c41 6c6c 6f63 0000 0000 # 07 "VirtualAlloc" then actual VirtualAlloc
4765 7446 696c 6541 7474 7269 6275 7465 # 08 "GetFileAttributesExA" then actual GetFileAttributesExA
7345 7841 0000 0000 0000 0000 0000 0000 # 09 "GetFileAttributesExA" continued
0000 0000 0000 0000 0000 0000 0000 0000 # 0A GetProcAddress
0000 0000 0000 0000 0000 0000 0000 0000 # 0B memset
4372 6561 7465 4669 6c65 4100 0000 0000 # 0C "CreateFileA" then actual CreateFileA
6872 6d63 2e64 6d70 0000 0000 0000 0000 # 0D "hrmc.dmp" then contents of hrmc.dmp
5265 6164 4669 6c65 0000 0000 0000 0000 # 0E "ReadFile" then actual ReadFile
5772 6974 6546 696c 6500 0000 0000 0000 # 0F "WriteFile" then actual WriteFile
4c6f 6164 4c69 6272 6172 7941 0000 0000 # 10 "LoadLibraryA" then actual LoadLibraryA
7573 6572 3332 2e64 6c6c 0000 0000 0000 # 11 "user32.dll" then actual user32
5265 6769 7374 6572 436c 6173 7341 0000 # 12 "RegisterClassA" then actual RegisterClassA
4372 6561 7465 5769 6e64 6f77 4578 4100 # 13 "CreateWindowExA" then actual CreateWindowExA
5065 656b 4d65 7373 6167 6541 0000 0000 # 14 "PeekMessageA" then actual PeekMessageA
506f 7374 5175 6974 4d65 7373 6167 6500 # 15 "PostQuitMessage" then actual PostQuitMessage
4465 6657 696e 646f 7750 726f 6341 0000 # 16 "DefWindowProcA" then actual DefWindowProcA
5472 616e 736c 6174 654d 6573 7361 6765 # 17 "TranslateMessage" then actual TranslateMessage
0000 0000 0000 0000 0000 0000 0000 0000 # 18
0000 cf10 0000 0000 0000 0000 0000 0000 # 19 WS_OVERLAPPEDWINDOW|WS_VISIBLE
4765 744d 6f64 756c 6548 616e 646c 6541 # 1A "GetModuleHandleA" then actual GetModuleHandleA
0000 0000 0000 0000 0000 0000 0000 0000 # 1B
0000 0000 0000 0000 0000 0000 0000 0000 # 1C
4469 7370 6174 6368 4d65 7373 6167 6541 # 1D "DispatchMessageA" then actual DispatchMessageA
0000 0000 0000 0000 0000 0000 0000 0000 # 1E
0000 0000 0000 0000 0000 0000 0000 0000 # 1F
0000 0000 0000 0000 0000 0000 0000 0000 # 20
0000 0000 0000 0000 0000 0000 0000 0000 # 21
0000 0000 0000 0000 0000 0000 0000 0000 # 22
0000 0000 0000 0000 0000 0000 0000 0000 # 23
0000 0000 0000 0000 0000 0000 0000 0000 # 24
0000 0000 0000 0000 0000 0000 0000 0000 # 25
0000 0000 0000 0000 0000 0000 0000 0000 # 26
0000 0000 0000 0000 0000 0000 0000 0000 # 27
0000 0000 0000 0000 0000 0000 0000 0000 # 28
0000 0000 0000 0000 0000 0000 0000 0000 # 29
0000 0000 0000 0000 0000 0000 0000 0000 # 2A
0000 0000 0000 0000 0000 0000 0000 0000 # 2B
0000 0000 0000 0000 0000 0000 0000 0000 # 2C
0000 0000 0000 0000 0000 0000 0000 0000 # 2D
0000 0000 0000 0000 0000 0000 0000 0000 # 2E
0000 0000 0000 0000 0000 0000 0000 0000 # 2F
0000 0000 0000 0000 0000 0000 0000 0000 # 30
0000 0000 0000 0000 0000 0000 0000 0000 # 31
0000 0000 0000 0000 0000 0000 0000 0000 # 32
0000 0000 0000 0000 0000 0000 0000 0000 # 33
0000 0000 0000 0000 0000 0000 0000 0000 # 34
0000 0000 0000 0000 0000 0000 0000 0000 # 35
0000 0000 0000 0000 0000 0000 0000 0000 # 36
0000 0000 0000 0000 0000 0000 0000 0000 # 37
0000 0000 0000 0000 0000 0000 0000 0000 # 38
0000 0000 0000 0000 0000 0000 0000 0000 # 39
0000 0000 0000 0000 0000 0000 0000 0000 # 3A
0000 0000 0000 0000 0000 0000 0000 0000 # 3B
0000 0000 0000 0000 0000 0000 0000 0000 # 3C
0000 0000 0000 0000 0000 0000 0000 0000 # 3D
0000 0000 0000 0000 0000 0000 0000 0000 # 3E
0000 0000 0000 0000 0000 0000 0000 0000 # 3F
0000 0000 0000 0000 0000 0000 0000 0000 # 40
0000 0000 0000 0000 0000 0000 0000 0000 # 41
0000 0000 0000 0000 0000 0000 0000 0000 # 42
0000 0000 0000 0000 0000 0000 0000 0000 # 43
0000 0000 0000 0000 0000 0000 0000 0000 # 44
0000 0000 0000 0000 0000 0000 0000 0000 # 45
0000 0000 0000 0000 0000 0000 0000 0000 # 46
0000 0000 0000 0000 0000 0000 0000 0000 # 47
0000 0000 0000 0000 0000 0000 0000 0000 # 48
0000 0000 0000 0000 0000 0000 0000 0000 # 49
0000 0000 0000 0000 0000 0000 0000 0000 # 4A
0000 0000 0000 0000 0000 0000 0000 0000 # 4B
0000 0000 0000 0000 0000 0000 0000 0000 # 4C
0000 0000 0000 0000 0000 0000 0000 0000 # 4D
0000 0000 0000 0000 0000 0000 0000 0000 # 4E
0000 0000 0000 0000 0000 0000 0000 0000 # 4F
9090 9058 4803 8510 3254 7648 0fb6 0050 # 50 *+@u8:local
9090 9058 4803 8510 3254 7648 0fbe 0050 # 51 *+@i8:local
5848 d1e0 4803 8510 3254 7648 0fb7 0050 # 52 *+@u16:local
5848 d1e0 4803 8510 3254 7648 0fbf 0050 # 53 *+@i16:local
58c1 e002 4803 8510 3254 768b 0050 9090 # 54 *+@u32:local
58c1 e002 4803 8510 3254 7648 6300 5090 # 55 *+@i32:local
9090 9090 488b 8510 3254 7650 9090 9090 # 56 @local
9090 9090 488d 8510 3254 7650 9090 9090 # 57 &local
58c1 e003 4803 8510 3254 7648 8b00 5090 # 58 *+@u64:local
9090 9058 4889 8510 3254 7690 9090 9090 # 59 =local
9090 9090 488b 8d10 3254 7658 4801 c850 # 5A +local
9090 9090 488b 8d10 3254 7658 4829 c850 # 5B -local
9090 9090 488b 8510 3254 76ff d050 9090 # 5C call local
0000 0000 0000 0000 0000 0000 0000 0000 # 5D
9090 9090 4881 ec10 3254 7690 9090 9090 # 5E reserve stack space
0000 0000 0000 0000 0000 0000 0000 0000 # 5F
5848 0fb6 0050 662e 0f1f 8400 0000 0000 # 60 @u8
5848 0fbe 0050 662e 0f1f 8400 0000 0000 # 61 @i8
5848 0fb7 0050 662e 0f1f 8400 0000 0000 # 62 @u16
5848 0fbf 0050 662e 0f1f 8400 0000 0000 # 63 @i16
588b 0050 6666 2e0f 1f84 0000 0000 0090 # 64 @u32
5848 6300 5066 662e 0f1f 8400 0000 0000 # 65 @i32
0000 0000 0000 0000 0000 0000 0000 0000 # 66
0000 0000 0000 0000 0000 0000 0000 0000 # 67
5848 8b00 5066 662e 0f1f 8400 0000 0000 # 68 @u64
5848 8b00 5066 662e 0f1f 8400 0000 0000 # 69 @i64
0000 0000 0000 0000 0000 0000 0000 0000 # 6A
0000 0000 0000 0000 0000 0000 0000 0000 # 6B
0000 0000 0000 0000 0000 0000 0000 0000 # 6C
0000 0000 0000 0000 0000 0000 0000 0000 # 6D
0000 0000 0000 0000 0000 0000 0000 0000 # 6E
0000 0000 0000 0000 0000 0000 0000 0000 # 6F
0000 0000 0000 0000 0000 0000 0000 0000 # 70
0000 0000 0000 0000 0000 0000 0000 0000 # 71
0000 0000 0000 0000 0000 0000 0000 0000 # 72
0000 0000 0000 0000 0000 0000 0000 0000 # 73
0000 0000 0000 0000 0000 0000 0000 0000 # 74
0000 0000 0000 0000 0000 0000 0000 0000 # 75
0000 0000 0000 0000 0000 0000 0000 0000 # 76
0000 0000 0000 0000 0000 0000 0000 0000 # 77
0000 0000 0000 0000 0000 0000 0000 0000 # 78
0000 0000 0000 0000 0000 0000 0000 0000 # 79
0000 0000 0000 0000 0000 0000 0000 0000 # 7A
0000 0000 0000 0000 0000 0000 0000 0000 # 7B
0000 0000 0000 0000 0000 0000 0000 0000 # 7C
0000 0000 0000 0000 0000 0000 0000 0000 # 7D
08c0 6666 2e0f 1f84 0000 0000 000f 1f00 # 7E {
4809 c066 662e 0f1f 8400 0000 0000 6690 # 7F }
0000 0000 0000 0000 0000 0000 0000 0000 # 80
0000 0000 0000 0000 0000 0000 0000 0000 # 81
0000 0000 0000 0000 0000 0000 0000 0000 # 82
0000 0000 0000 0000 0000 0000 0000 0000 # 83
0000 0000 0000 0000 0000 0000 0000 0000 # 84
0000 0000 0000 0000 0000 0000 0000 0000 # 85
0000 0000 0000 0000 0000 0000 0000 0000 # 86
0000 0000 0000 0000 0000 0000 0000 0000 # 87
0000 0000 0000 0000 0000 0000 0000 0000 # 88
0000 0000 0000 0000 0000 0000 0000 0000 # 89
0000 0000 0000 0000 0000 0000 0000 0000 # 8A
0000 0000 0000 0000 0000 0000 0000 0000 # 8B
0000 0000 0000 0000 0000 0000 0000 0000 # 8C
0000 0000 0000 0000 0000 0000 0000 0000 # 8D
0000 0000 0000 0000 0000 0000 0000 0000 # 8E
0000 0000 0000 0000 0000 0000 0000 0000 # 8F
5958 8801 6666 2e0f 1f84 0000 0000 0090 # 90 =u8
5958 8801 6666 2e0f 1f84 0000 0000 0090 # 91 =i8
5958 6689 0166 662e 0f1f 8400 0000 0000 # 92 =u16
5958 6689 0166 662e 0f1f 8400 0000 0000 # 93 =i16
5958 8901 6666 2e0f 1f84 0000 0000 0090 # 94 =u32
5958 8901 6666 2e0f 1f84 0000 0000 0090 # 95 =i32
0000 0000 0000 0000 0000 0000 0000 0000 # 96
0000 0000 0000 0000 0000 0000 0000 0000 # 97
5958 4889 0166 662e 0f1f 8400 0000 0000 # 98 =u64
5958 4889 0166 662e 0f1f 8400 0000 0000 # 99 =i64
0000 0000 0000 0000 0000 0000 0000 0000 # 9A
0000 0000 0000 0000 0000 0000 0000 0000 # 9B
0000 0000 0000 0000 0000 0000 0000 0000 # 9C
0000 0000 0000 0000 0000 0000 0000 0000 # 9D
0000 0000 0000 0000 0000 0000 0000 0000 # 9E
0000 0000 0000 0000 0000 0000 0000 0000 # 9F
5958 4809 c850 662e 0f1f 8400 0000 0000 # A0 or
5848 f7d0 5066 662e 0f1f 8400 0000 0000 # A1 not
4899 5958 48f7 f150 0f1f 8400 0000 0000 # A2 udiv
5958 48f7 e152 662e 0f1f 8400 0000 0000 # A3 upper umul
5958 48d3 e050 662e 0f1f 8400 0000 0000 # A4 shl
5848 f7d8 5066 662e 0f1f 8400 0000 0000 # A5 neg
4899 5958 48f7 f152 0f1f 8400 0000 0000 # A6 umod
5958 48d3 e850 662e 0f1f 8400 0000 0000 # A7 shr
5958 4831 c850 662e 0f1f 8400 0000 0000 # A8 xor
5958 48d3 f850 662e 0f1f 8400 0000 0000 # A9 sar
5958 4801 c850 662e 0f1f 8400 0000 0000 # AA add
5958 4829 c850 662e 0f1f 8400 0000 0000 # AB sub
4899 5958 48f7 f952 0f1f 8400 0000 0000 # AC mod
4899 5958 48f7 f950 0f1f 8400 0000 0000 # AD div
5958 48f7 e950 662e 0f1f 8400 0000 0000 # AE mul
5958 4821 c850 662e 0f1f 8400 0000 0000 # AF and
9090 9090 9090 5848 85c0 0f84 70f2 ffff # B0 ?
5948 83ec 2066 662e 0f1f 8400 0000 0000 # B1 pop 1 abi reg
595a 4883 ec20 662e 0f1f 8400 0000 0000 # B2 pop 2 abi regs
595a 4158 4883 ec20 0f1f 8400 0000 0000 # B3 pop 3 abi regs
595a 4158 4159 4883 ec20 660f 1f44 0000 # B4 pop 4 abi regs; rsp-20 is for shadow space
0000 0000 0000 0000 0000 0000 0000 0000 # B5 unused in windows, used in linux
0000 0000 0000 0000 0000 0000 0000 0000 # B6 unused in windows, used in linux
0000 0000 0000 0000 0000 0000 0000 0000 # B7 unused in windows, used in linux
0000 0000 0000 0000 0000 0000 0000 0000 # B8 unused in windows, used in linux
0000 0000 0000 0000 0000 0000 0000 0000 # B9 adjust for non-syscall abi - unused in windows, used in linux (TODO: maybe make BE just ret without doing pop rax or stack restoration and make B9 do that stuff cuz 9 meaning store kind of matches that)
4883 e4f0 6666 2e0f 1f84 0000 0000 0090 # BA stack must be 16 byte aligned on function entry
9090 9090 9090 9090 9090 90e9 c0f1 ffff # BB backward (continue)
58ff d050 6666 2e0f 1f84 0000 0000 0090 # BC call procedure
5548 89e5 5152 4150 4151 660f 1f44 0000 # BD deploy stack frame
5848 89ec 5dc3 662e 0f1f 8400 0000 0000 # BE return
9090 9090 9090 9090 9090 90e9 80f1 ffff # BF forward (break)
0000 0000 0000 0000 0000 0000 0000 0000 # C0
5958 4839 c80f 95c0 480f bec0 500f 1f00 # C1 !=
5958 4839 c80f 96c0 480f bec0 500f 1f00 # C2 <=u
5958 4839 c80f 93c0 480f bec0 500f 1f00 # C3 >=u
5958 4839 c80f 9cc0 480f bec0 500f 1f00 # C4 <
0000 0000 0000 0000 0000 0000 0000 0000 # C5
5958 4839 c80f 9ec0 480f bec0 500f 1f00 # C6 <=
5958 4839 c80f 9fc0 480f bec0 500f 1f00 # C7 >
0000 0000 0000 0000 0000 0000 0000 0000 # C8
5958 4839 c80f 9dc0 480f bec0 500f 1f00 # C9 >=
5958 4839 c80f 97c0 480f bec0 500f 1f00 # CA >u
5958 4839 c80f 92c0 480f bec0 500f 1f00 # CB <u
0000 0000 0000 0000 0000 0000 0000 0000 # CC
0000 0000 0000 0000 0000 0000 0000 0000 # CD
5958 4839 c80f 94c0 480f bec0 500f 1f00 # CE ==
0000 0000 0000 0000 0000 0000 0000 0000 # CF
9090 9058 4803 8310 3254 7648 0fb6 0050 # D0 *+@u8:global
9090 9058 4803 8310 3254 7648 0fbe 0050 # D1 *+@i8:global
5848 d1e0 4803 8310 3254 7648 0fb7 0050 # D2 *+@u16:global
5848 d1e0 4803 8310 3254 7648 0fbf 0050 # D3 *+@i16:global
58c1 e002 4803 8310 3254 768b 0050 9090 # D4 *+@u32:global
58c1 e002 4803 8310 3254 7648 6300 5090 # D5 *+@i32:global
9090 9090 488b 8310 3254 7650 9090 9090 # D6 @global
9090 9090 488d 8310 3254 7650 9090 9090 # D7 &global
58c1 e003 4803 8310 3254 7648 8b00 5090 # D8 *+@u64:global
9090 9058 4889 8310 3254 7690 9090 9090 # D9 =global
9090 9090 488b 8b10 3254 7658 4801 c850 # DA +global
9090 9090 488b 8b10 3254 7658 4829 c850 # DB -global
9090 9090 488b 8310 3254 76ff d050 9090 # DC call global
0000 0000 0000 0000 0000 0000 0000 0000 # DD
9090 9090 9090 9090 9048 8d1d 1032 5476 # DE restore table ptr
0000 0000 0000 0000 0000 0000 0000 0000 # DF
9090 9090 5848 052a 0000 0048 0fb6 0050 # E0 +@u8:imm
9090 9090 5848 052a 0000 0048 0fbe 0050 # E1 +@i8:imm
9090 9090 5848 052a 0000 0048 0fb7 0050 # E2 +@u16:imm
9090 9090 5848 052a 0000 0048 0fbf 0050 # E3 +@i16:imm
9090 9090 5848 052a 0000 008b 0050 9090 # E4 +@u32:imm
9090 9090 5848 052a 0000 0048 6300 5090 # E5 +@i32:imm
9090 9090 9090 6a2a 9090 9090 9090 9090 # E6 load imm
9090 9090 9090 6a2a 5848 89ec 5dc3 9090 # E7 ret imm
9090 9090 5848 052a 0000 0048 8b00 5090 # E8 +@u64:imm
9090 6548 8b04 2560 0000 0050 9090 9090 # E9 gs:imm
9090 9058 4883 c02a 5090 9090 9090 9090 # EA +imm
9090 9058 4883 e82a 5090 9090 9090 9090 # EB -imm
9090 9058 48c1 e02a 5090 9090 9090 9090 # EC <<imm
0000 0000 0000 0000 0000 0000 0000 0000 # ED
5848 c1e0 0848 0d2a 0000 0050 9090 9090 # EE <<|imm
0000 0000 0000 0000 0000 0000 0000 0000 # EF
0000 0000 0000 0000 0000 0000 0000 0000 # F0
0000 0000 0000 0000 0000 0000 0000 0000 # F1
0000 0000 0000 0000 0000 0000 0000 0000 # F2
0000 0000 0000 0000 0000 0000 0000 0000 # F3
0000 0000 0000 0000 0000 0000 0000 0000 # F4
0000 0000 0000 0000 0000 0000 0000 0000 # F5
0000 0000 0000 0000 0000 0000 0000 0000 # F6
0000 0000 0000 0000 0000 0000 0000 0000 # F7
0000 0000 0000 0000 0000 0000 0000 0000 # F8
0000 0000 0000 0000 0000 0000 0000 0000 # F9
0000 0000 0000 0000 0000 0000 0000 0000 # FA
0000 0000 0000 0000 0000 0000 0000 0000 # FB
0000 0000 0000 0000 0000 0000 0000 0000 # FC
0000 0000 0000 0000 0000 0000 0000 0000 # FD
0000 0000 0000 0000 0000 0000 0000 0000 # FE
0000 0000 0000 0000 0000 0000 0000 0000 # FF

## int main()
BD00 5E20 # setup stack frame
DC02 D902 # get_kernel32() =02
D706 D602 DC0A D906 # GetProcAddress(kernel32, "GetStdHandle") =06
D70F D602 DC0A D90F # GetProcAddress(kernel32, "WriteFile") =0F
D70E D602 DC0A D90E # GetProcAddress(kernel32, "ReadFile") =0E
D70C D602 DC0A D90C # GetProcAddress(kernel32, "CreateFileA") =0C
#D701 D602 DC0A D901 # GetProcAddress(kernel32, "CloseHandle") =01
D707 D602 DC0A D907 # GetProcAddress(kernel32, "VirtualAlloc") =07
#D708 D602 DC0A D908 # GetProcAddress(kernel32, "GetFileAttributesExA") =08
E6F5 B100 DC06 59FF # GetStdHandle(STD_OUTPUT_HANDLE) =$FF
#BA00 E600 D701 E60C D706 56FF B400 DC0F # WriteFile(fout,msg,size,&written,0)
BA00 E640 E630 E608 A400 E640 E610 A400 E600 B400 DC07 59FB # VirtualAlloc(0, 0x400000, MEM_RESERVE|MEM_COMMIT, PAGE_EXECUTE_READWRITE) =$FB
BA00 E600 E600 E603 E600 E601 E608 E61C A400 D70D B400 DC0C 59FD # CreateFileA("hrmc.dmp", GENERIC_READ, FILE_READ_SHARE, 0, OPEN_EXISTING, 0, 0) =$FD
BA00 E600 57FC E640 E610 A400 56FB 56FD B400 DC0E # ReadFile(fin, inbuf, insize, &bytes_read, 0)
#BA00 E600 57FA 56FC 56FB 56FF B400 DC0F # WriteFile(fout,msg,size,&written,0)
BA00 E640 E630 E608 A400 E640 E610 A400 E600 B400 DC07 59F0 # VirtualAlloc(0, 0x400000, MEM_RESERVE|MEM_COMMIT, PAGE_EXECUTE_READWRITE) =$F0
E600 59F1 # i=0
E600 59F2 # j=0
7E71 56F1 56FC C400 B071 # while i < bytes_read
     7E73 56F1 50FB E623 CE00 B073 # i *+@u8:inbuf 23 == ? (aka skip # comments)
          7E74 56F1 EA01 59F1 56F1 50FB E60A C100 B074 BB74 7F74 # do { i += 1 } while( i *+@u8:inbuf 0x10 != )
     7F73
     7E73 56F1 50FB E630 C400 B073 56F1 EA01 59F1 BB71 7F73 # i *+@u8:inbuf 0x30 < ? i += 1 ; continue (aka skip whitespace)
     7E72
          7E73 56F1 50FB E661 C900 B073 56F1 50FB E657 AB00 E604 A400 59F4 BF72 7F73 # i *+@u8:inbuf 61 >= ? i *+@u8:inbuf 51 - 4 << =$F4 ; break
          7E73 56F1 50FB E641 C900 B073 56F1 50FB E637 AB00 E604 A400 59F4 BF72 7F73 # i *+@u8:inbuf 41 >= ? i *+@u8:inbuf 37 - 4 << =$F4 ; break
          56F1 50FB E630 AB00 E604 A400 59F4 # i *+@u8:inbuf 30 - 4 << =$f4
     7F72
     56F1 EA01 59F1 # i += 1
     7E72
          7E73 56F1 50FB E661 C900 B073 56F1 50FB E657 AB00 56F4 A000 56F0 5AF2 9000 BF72 7F73 # i *+@u8:inbuf 61 >= ? i *+@u8:inbuf 57 - $F4 | outbuf +j =u8 ; break
          7E73 56F1 50FB E641 C900 B073 56F1 50FB E637 AB00 56F4 A000 56F0 5AF2 9000 BF72 7F73 # i *+@u8:inbuf 41 >= ? i *+@u8:inbuf 37 - $F4 | outbuf +j =u8 ; break
          56F1 50FB E630 AB00 56F4 A000 56F0 5AF2 9000 # i *+@u8:inbuf 30 - $F4 | outbuf +j =u8
     7F72
     56F2 EA01 59F2 # j += 1
     56F1 EA01 59F1 # i += 1
     BB71
7F71
#E665 D70D EA05 9000 E678 D70D EA06 9000 E665 D70D EA07 9000 # change "hrmc.dmp" to "hrmc.exe"
E66F D70D EA05 9000 E675 D70D EA06 9000 E674 D70D EA07 9000 # change "hrmc.dmp" to "hrmc.out"
BA00 E600 E600 E602 E600 E600 E604 E61C A400 D70D B400 DC0C 59F5 # CreateFileA(filename, GENERIC_WRITE, 0, 0, CREATE_ALWAYS, 0, 0) =F5
BA00 E600 57FA 56F2 56F0 56F5 B400 DC0F # WriteFile(fout,msg,size,&written,0)

# TODO: use actual GetProcAddress - need to in order to get actual DefWindowProcA
D710 D602 DC0A D910 # GetProcAddress(kernel32, "LoadLibraryA") =10
BA00 D711 B100 DC10 D911 # LoadLibraryA("user32.dll") =11
D71A D602 DC0A D91A # GetProcAddress(kernel32, "GetModuleHandleA") =1A
D715 D611 DC0A D915 # GetProcAddress(user32, "PostQuitMessage") =15
D716 D611 DC0A D916 # GetProcAddress(user32, "DefWindowProcA") =16
D712 D611 DC0A D912 # GetProcAddress(user32, "RegisterClassA") =12
D713 D611 DC0A D913 # GetProcAddress(user32, "CreateWindowExA") =13
D714 D611 DC0A D914 # GetProcAddress(user32, "PeekMessageA") =14
D717 D611 DC0A D917 # GetProcAddress(user32, "TranslateMessage") =17
D71D D611 DC0A D91D # GetProcAddress(user32, "DispatchMessageA") =1D
# init winclass struct
E648 E600 57E0 DC0B # memset(&winclass, 0, 72)
D61F 59E1 # winclass.lpfnWndProc = Win32EventHandler
BA00 E600 B100 DC1A 59E3 # winclass.hInstance = GetModuleHandleA(0)
D70D 59E8 # winclass.lpszClassName = "hrmc.out"
BA00 57E0 B100 DC12 # RegisterClassA(&winclass)
# createwindow(0,className,title,style,x,y,width,height,0,0,instance,0)
E608 E61C A400 59EF # CW_USEDEFAULT =EF
#BA00 E600 56E3 E600 E600 56EF 56EF 56EF 56EF D619 D70D D70D E600 B400 DC13 59EE
7E71

7F71
# while true
# peekmessage
	# if msg.message is WM_QUIT
		# break
	# translate
	# dispatch
E700 # return

7E1F DE00 BD00 # 1E=&Win32EventHandler
7E71 56FE E602 CE00 B071 # msg WM_DESTROY == ?
     BA00 E600 B100 DC15 # PostQuitMessage(0)
7F71
#BA00 56FC 56FD 56FE 56FF B400 DC16 BE00 # return DefWindowProcA(window, msg, wp, lp)
E601 BE00 # return 1

7E0B BD00 # 0B=&memset(dest, val, count); setup stack frame
5602 59FF # bytes = dest
7E71 5604 B071 # while(count)
     5603 56FF 9000 # val bytes =u8
	 5604 AB01 5904 # count--
	 56FF AA01 59FF # byte++
7F71
5602 BE00 # return dest

## void* get_kernel32()
7E02 BD00 5E10 # 02=&get_kernel32; setup stack frame; reserve 16 stack slots for locals
E960 E818 E820 59FD # @gs:60 +@u64:18 +@u64:20 =FD
56FD E820 59FB # @FD +@u64:20 =FB
7E71 56FB B071 # @FB ?
     56FD E238 59F1 # @FD +@u16:38 =F1
     56FD E840 59FA # @FD +@u64:40 =FA
     56F1 EB02 59F1 # @F1 -2 =F1
     E616 59F2 # 22 =F2
     7E72 56F2 E600 C900 B072 # @F2 0 >= ?
          56FA 5AF1 6200 59F3 # @FA +@F1 @u16 =F3
          D703 5AF2 6200 59F4 # &03 +@F2 @u16 =F4
          7E73 56F3 56F4 C100 56F3 56F4 EA20 C100 AF00 B073 # @F3 @F4 != @F3 @F4 +20 != & ?
               BF72 # break
          7F73
          56F1 EB02 59F1 # @F1 -2 =F1
          56F2 EB02 59F2 # @F2 -2 =F2
          BB72 # continue
     7F72
     7E72 56F2 E600 C400 B072 # @F2 0 < ?
          56FB BE00 # @FB return
     7F72
     56FD 6800 59FD # @FD @u64 =FD
     56FD E820 59FB # @FD +@u64:20 =FB
     BB71 # continue
7F71
E700 # return0

## int strcmp(char* s1 char* s2)
7E05 BD00 # 05=&strcmp; setup stack frame
7E71 5602 6000 B071 5603 6000 B071 5602 6000 5603 6000 CE00 B071 # $02 @u8 ? $03 @u8 ? $02 @u8 $03 @u8 == ?    aka     while(*s1 && *s2 && *s1 == *s2) {
     5602 EA01 5902 5603 EA01 5903 # $02 +1 =$02 $03 +1 =$03    aka      s1++; s2++;
     BB71 # continue
7F71
7E71 5602 6000 5603 6000 CE00 B071 # $02 @u8 $03 @u8 == ?       aka      if(*s1 == *s2) {
     E700 # return0
7F71
5602 6000 5603 6000 AB00 BE00 # $02 @u8 $03 @u8 - return        aka      return *s1 - *s2;

## void* GetProcAddress(void* handle char* proc_name)
7E0A BD00 5E10 # 0A=&GetProcAddress; setup stack frame; reserve 16 stack slots for locals
5602 E43C 5A02 59FD # $02 +@u32:3C +$02 =FD
56FD EA18 E470 5A02 59FE # @FD +18 +@u32:70 +$02 =FE
56FE E420 5A02 59FA # @FE +@u32:20 +$02 =FA
E600 59F0 # 0 =F0
56FE E518 59FF # @FE +@i32:18 =FF
E600 59F1 # 0 =F1
E600 59FC # 0 =FC
7E71 # do {
     7E72 56FC E600 C700 B072 56F1 59F0 7F72 # @FC 0 > ? @F1 =F0
     7E72 56FC E600 C400 B072 56F1 59FF 7F72 # @FC 0 < ? @F1 =FF
     56FF 5AF0 E601 A900 59F1 # @FF @F0 + 1 >> =F1
     56F1 54FA 5A02 59F2 # @F1 *+@u32:FA +$02 =F2
     56F2 5603 DC05 59FC # @F2 $03 strcmp =FC
56FC E600 C100 B071 BB71 7F71 # @FC 0 != ? continue }
7E71 56F1 54FA 5A02 5603 DC05 E600 C100 B071 E700 7F71 # index *+@u32:FA +$02 $03 strcmp 0 != ? return0
56FE E424 5A02 59F7 # @FE +@u32:24 +$02 =F7
56FE E41C 5A02 59F8 # @FE +@u32:1C +$02 =F8
56F1 52F7 54F8 5A02 BE00 # @F1 *+@u16:F7 *+@u32:F8 +$02 return
0000 # end compilation

